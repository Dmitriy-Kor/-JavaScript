{"version":3,"sources":["board.js","game.js","main.js","status.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"../app.js","sourcesContent":["class Board {\n    constructor() {\n        this.gameTableElement = document.getElementById(\"game\");\n    }\n\n    init(game, status){\n        this.game = game;\n        this.status = status;\n    }\n\n    renderMap() {\n        for (let row = 0; row < 3; row++) {\n            const tr = document.createElement('tr');\n            this.gameTableElement.appendChild(tr);\n            for (let col = 0; col < 3; col++) {\n                let td = document.createElement('td');\n                td.dataset.row = row.toString();\n                td.dataset.col = col.toString();\n                tr.appendChild(td);\n            }\n        }\n    }\n\n    initEventHandlers(){\n        this.gameTableElement.addEventListener(\"click\", event => this.game.cellClickHandler(event));\n    }\n\n    /**\n     * Проверка что клик был по ячейке.\n     * @param {Event} event\n     * @param {HTMLElement} event.target\n     * @returns {boolean} Вернет true, если клик был по ячейке, иначе false.\n     */\n    isClickByCell(event) {\n        return event.target.tagName == \"TD\";\n    }\n\n    /**\n     * Проверка что в ячейку не ставили значение (крестик или нолик).\n     * @param {Event} event\n     * @param {HTMLElement} event.target\n     * @returns {boolean} Вернет true, если ячейка пуста, иначе false.\n     */\n    isCellEmpty(event) {\n        // Получаем строку и колонку куда кликнули.\n        let row = +event.target.dataset.row;\n        let col = +event.target.dataset.col;\n\n        return this.status.mapValues[row][col] === \"\";\n    }\n    /**\n     * Заполняет ячейку в которую кликнул пользователь в событии event.\n     * @param {Event} event\n     * @param {HTMLElement} event.target\n     */\n    fillCell(event) {\n        // Получаем строку и колонку куда кликнули.\n        let row = +event.target.dataset.row;\n        let col = +event.target.dataset.col;\n\n        // Заполняем ячейку и ставим значение в массиве, в свойстве mapValues.\n        this.status.mapValues[row][col] = this.status.phase;\n        event.target.textContent = this.status.phase;\n    }\n}","class Game {\n\n    /**\n     * @param {Status} status\n     * @param {Board} board\n     */\n    init(status, board) {\n        this.status = status;\n        this.board = board;\n    }\n\n    /**\n     * Обработчик события клика.\n     * @param {MouseEvent} event\n     */\n    cellClickHandler(event) {\n        // Если клик не нужно обрабатывать, уходим из функции.\n        if (!this.isCorrectClick(event)) {\n            return;\n        }\n        this.board.fillCell(event);\n        if (this.hasWon()) {\n            // Ставим статус в \"остановлено\".\n            this.status.setStatusStopped();\n            // Сообщаем о победе пользователя.\n            this.sayWonPhrase();\n        }\n\n        // Меняем фигуру (крестик или нолик).\n        this.status.togglePhase();\n    }\n\n    /**\n     * Проверка был ли корректный клик, что описан в событии event.\n     * @param {Event} event\n     * @returns {boolean} Вернет true в случае если статус игры \"играем\", клик что описан в объекте event был\n     * по ячейке и ячейка куда был произведен клик был по пустой ячейке.\n     */\n    isCorrectClick(event) {\n        return this.status.isStatusPlaying() && this.board.isClickByCell(event) && this.board.isCellEmpty(event);\n    }\n\n    /**\n     * Проверка есть ли выигрышная ситуация на карте.\n     * @returns {boolean} Вернет true, если игра выиграна, иначе false.\n     */\n    hasWon() {\n        return this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }) ||\n            this.isLineWon({ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }) ||\n            this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }) ||\n\n            this.isLineWon({ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }) ||\n            this.isLineWon({ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }) ||\n            this.isLineWon({ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }) ||\n\n            this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }) ||\n            this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 1 }, { x: 2, y: 0 });\n    }\n\n    /**\n     * Проверка есть ли выигрышная ситуация на линии.\n     * @param {{x: int, y: int}} a 1-ая ячейка.\n     * @param {{x: int, y: int}} b 2-ая ячейка.\n     * @param {{x: int, y: int}} c 3-я ячейка.\n     * @returns {boolean} Вернет true, если линия выиграна, иначе false.\n     */\n    isLineWon(a, b, c) {\n        let value = this.status.mapValues[a.y][a.x] + this.status.mapValues[b.y][b.x] + this.status.mapValues[c.y][c.x];\n        return value === 'XXX' || value === '000';\n    }\n\n    /**\n     * Сообщает о победе.\n     */\n    sayWonPhrase() {\n        let figure = this.status.phase === 'X' ? 'Крестики' : 'Нолики';\n        alert(`${figure} выиграли!`);\n    }\n\n}","window.addEventListener(\"load\",function () {\n    const game = new Game();\n    const board = new Board();\n    const  status = new Status();\n\n    board.init(game, status);\n    game.init(status, board);\n\n    board.renderMap();\n    board.initEventHandlers();\n});","class Status {\n    constructor() {\n        this.status = 'playing';\n        this.mapValues = [\n            ['', '', ''],\n            ['', '', ''],\n            ['', '', ''],\n        ];\n        this.phase = 'X';\n    }\n\n    /**\n     * Проверка что мы \"играем\", что игра не закончена.\n     * @returns {boolean} Вернет true, статус игры \"играем\", иначе false.\n     */\n    isStatusPlaying() {\n        return this.status === 'playing';\n    }\n\n    /**\n     * Ставит статус игры в \"остановлена\".\n     */\n    setStatusStopped() {\n        this.status = 'stopped';\n    }\n\n    /**\n     * Сообщает о победе.\n     */\n    sayWonPhrase() {\n        let figure = this.status.phase === 'X' ? 'Крестики' : 'Нолики';\n        alert(`${figure} выиграли!`);\n    }\n\n    /**\n     * Меняет фигуру (крестик или нолик).\n     */\n    togglePhase() {\n        this.phase = this.phase === 'X' ? '0' : 'X';\n    }\n}"]}