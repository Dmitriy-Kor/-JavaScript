{"version":3,"sources":["board.js","food.js","game.js","main.js","menu.js","score.js","settings.js","snake.js","status.js"],"names":[],"mappingsltBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["class Board {\n    constructor() {\n        this.boardEl = document.getElementById(\"game\");\n    }\n\n    /**\n     * метод получает другие игровые объекты, которые нужны для работы.\n     * @param {Settings} settings объект настроек.\n     * @param {Snake} snake объект змейки.\n     */\n    init(settings, snake) {\n        this.settings = settings;\n        this.snake = snake;\n    }\n\n    renderBoard() {\n        this.boardEl.innerHTML = \"\";\n        for (let row = 0; row < this.settings.rowsCount; row++) {\n            let tr = document.createElement(\"tr\");\n            this.boardEl.appendChild(tr);\n\n            for (let col = 0; col < this.settings.colsCount; col++) {\n                let td = document.createElement(\"td\");\n                tr.appendChild(td);\n            }\n        }\n    }\n\n    /**\n     * Метод очищает игровое поле\n     */\n    clearBoard(){\n        const tdElems = document.querySelectorAll(\"td\");\n        tdElems.forEach(function (td) {\n            td.className = \"\";\n\n        })\n    }\n\n    /**\n     * Метод отрисовывает змейку на доске.\n     */\n    renderSnake() {\n        const snakeBodyElems = this.getSnakeBodyElems(this.snake.body);\n        if (snakeBodyElems){\n            snakeBodyElems.forEach(function (tdEl) {\n                tdEl.classList.add(\"snakeBody\")\n            })\n        }\n    }\n\n    /**\n     * Получаем ячейку таблицы.\n     * @param {number} x координата по оси х.\n     * @param {number} y координата по оси y.\n     * @returns {HTMLTableCellElement} тег td\n     */\n    getCellEl(x, y) {\n        return this.boardEl.querySelector((`tr:nth-child(${y}) td:nth-child(${x})`))\n    }\n\n    /**\n     * Получаем набор тегов td, представляющих тело змейки.\n     * @param {array} bodyCoords массив объектов с координатами\n     * @returns {HTMLTableCellElement[]|null} возвращается набор тегов td если были\n     * переданы координаты, иначе null.\n     */\n    getSnakeBodyElems(bodyCoords) {\n        if (bodyCoords.length > 0) {\n            let bodyElems = [];\n            for (let value of bodyCoords) {\n                let elem = this.getCellEl(value.x, value.y);\n                bodyElems.push(elem);\n            }\n            return bodyElems;\n        }\n        return null;\n    }\n    renderFood(coords) {\n        const foofCell = this.getCellEl(coords.x, coords.y);\n        foofCell.classList.add(\"food\");\n    }\n    isHeadOnFood(){\n        return this.boardEl.querySelector(\".food\").classList.contains(\"snakeBody\");\n    }\n\n\n    isNextStepToWall(nextCellCoords) {\n        let nextCell = this.getCellEl(nextCellCoords.x, nextCellCoords.y);\n        nextCell === null;\n    }\n}","class Food {\n    constructor() {\n        this.x = null;\n        this.y = null;\n    }\n\n    /**\n     * Метод получает другие игровые объекты, которые нужны ему\n     * для работы.\n     * @param {Settings} settings объект настроек\n     * @param {Snake} snake объект змейки\n     * @param {Board} board объект игрового поля\n     */\n    init(settings, snake, board) {\n        this.settings = settings;\n        this.snake = snake;\n        this.board = board;\n    }\n\n    /**\n     * Метод устанавливает новое случайное положение еды на игровом\n     * поле.\n     */\n    setNewFood() {\n        const food = this.generateRandomCoordinates();\n        this.board.renderFood(food);\n    }\n\n    /**\n     * Метод генерирует новый объект еды со случайным\n     * положением на игровом поле\n     * @returns {Food}\n     */\n    generateRandomCoordinates() {\n        while (true) {\n            this.x = Math.floor(Math.random() * this.settings.colsCount) + 1;\n            this.y = Math.floor(Math.random() * this.settings.rowsCount) + 1;\n            let cell = this.board.getCellEl(this.x, this.y);\n\n            if (cell.classList.contains(\"snakeBody\")) {\n                continue;\n            }\n            return this;\n        }\n    }\n\n    setFood(){\n       this.board.renderFood(this);\n    }\n\n}","class Game {\n    constructor() {\n        this.tickIndetifier = null;\n        this.messegeEl = document.getElementById(\"message\");\n    }\n\n    /**\n     * Метод получает другие игровые объекты, которые нужны ему\n     * для работы.\n     * @param {Settings} settings\n     * @param {Status} status\n     * @param {Board} board\n     * @param {Snake} snake\n     * @param {Menu} menu\n     * @param {Food} food\n     * @param {Score} score\n     */\n    init(settings, status, board, snake, menu, food, score) {\n        this.settings = settings;\n        this.status = status;\n        this.board = board;\n        this.snake = snake;\n        this.menu = menu;\n        this.food = food;\n        this.score = score;\n    }\n\n    run() {\n        this.score.setToWin(this.settings.winLength);\n        this.menu.addButtonsClickListeners(this.start.bind(this), this.pause.bind(this));\n        document.addEventListener('keydown', this.pressKeyHandler.bind(this));\n    }\n\n    start() {\n        if (this.status.isPaused()) {\n            this.status.setPlaying();\n            this.tickIdentifier = setInterval(this.doTick.bind(this), 1000 / this.settings.speed);\n        }\n    }\n\n    /**\n     * Метод ставит игру на паузу.\n     */\n    pause() {\n        if (this.status.isPlaying()) {\n            this.status.setPaused();\n            clearInterval(this.tickIdentifier);\n        }\n    }\n\n    /**\n     * Этот метод запускается каждую секунду и осуществляет:\n     * 1. перемещение змейки\n     * 2. проверяет проиграна/выиграна ли игра\n     * 3. увеличивает размер змейки если она ест еду\n     * 4. заново отрисовывает положение змейки и еды\n     */\n    doTick() {\n        this.snake.performStep(); //змейка делает шаг\n        this.score.setCurrent(this.snake.body.length); //передает длину змейки\n        if (this.isSnakeSteppedOntoItself()) {\n            return;\n        }\n\n        if (this.isGameWon()) { //проверка на победу\n            return;\n        }\n        if (this.board.isHeadOnFood()) {\n            this.snake.increaseBody();\n            this.food.setNewFood();\n        }\n        this.board.clearBoard(); //очищает поле\n        this.food.setFood(); // ставим еду\n        this.board.renderSnake(); // отрисовываем змейку\n\n\n    }\n\n    /**\n     * В зависимости от нажатой кнопки (вверх, вниз, влево, вправо) будет\n     * вызываться соответствующий метод.\n     * @param {KeyboardEvent} event\n     */\n    pressKeyHandler(event) {\n        switch (event.key) {\n            case \"ArrowUp\":\n                this.snake.changeDirection('up');\n                break;\n            case \"ArrowDown\":\n                this.snake.changeDirection('down');\n                break;\n            case \"ArrowLeft\":\n                this.snake.changeDirection('left');\n                break;\n            case \"ArrowRight\":\n                this.snake.changeDirection('right');\n                break;\n        }\n    }\n\n    /**\n     * Метод проверяет выиграна ли игра, останавливает игру,\n     * выводит сообщение о выигрыше.\n     * @returns {boolean} если длина змейки достигла длины нужной\n     * для выигрыша, тогда true, иначе false.\n     */\n    isGameWon() {\n        if (this.snake.body.length == this.settings.winLength) {\n            clearInterval(this.tickIdentifier);\n            this.setMessage(\"Вы выиграли\");\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Метод выводит сообщение на странице.\n     * @param {string} text\n     */\n    setMessage(text) {\n        this.messegeEl.innerText = text;\n    }\n\n    /**\n     * метод проверяет ест ли змейка сама себя\n     */\n    isSnakeSteppedOntoItself() {\n        let cellArr = this.snake.body.map(function (cellCoords) { //создаем новый массив с координатами тела змйки\n            return cellCoords.x.toString() + cellCoords.y.toString(); //переводим координаты в строку\n        });\n        let head = cellArr.shift(); // получаем голову и удаляем ее из массива (первый элемент)\n        if (cellArr.includes(head)) { // проверяем содержит массив удаленную голову\n            clearInterval(this.tickIdentifier);\n            this.setMessage(\"Вы проиграли\");\n            return true;\n        }\n        return false;\n    };\n\n\n}","window.addEventListener(\"load\", () => {\n    const settings = new Settings();\n    const status = new Status();\n    const snake = new Snake();\n    const board = new Board();\n    const food = new Food();\n    const menu = new Menu();\n    const game = new Game();\n    const score = new Score();\n\n    settings.init({speed: 5, winLength: 10});\n    snake.init(settings);\n    board.init(settings, snake);\n    food.init(settings, snake, board);\n    game.init(settings, status, board, snake, menu, food, score);\n    score.init(settings);\n\n    board.renderBoard();\n    board.renderSnake();\n\n    food.setNewFood();\n    game.run();\n});","class Menu {\n    constructor() {\n        this.startBtnEl = document.getElementById('startBtn');\n        this.pauseBtnEl = document.getElementById('pauseBtn');\n    }\n\n    /**\n     * Метод назначает переданные функции в качестве обработчиков\n     * событий клика на кнопки \"Старт\" и \"Пауза\".\n     * @param {Function} startBtnClickHandler\n     * @param {Function} pauseBtnClickHandler\n     */\n    addButtonsClickListeners(startBtnClickHandler, pauseBtnClickHandler) {\n        this.startBtnEl.addEventListener('click', startBtnClickHandler);\n        this.pauseBtnEl.addEventListener('click', pauseBtnClickHandler);\n    }\n\n}","class Score {\n    constructor() {\n        this.currentEl = document.querySelector(\".current\");\n        this.toWinEl = document.querySelector(\".toWin\");\n    }\n\n    /**\n     * @param {Settings} settings настройки игры\n     */\n    init(settings) {\n        this.settings = settings;\n    }\n\n    /**\n     * Метод устанавливает количество очков, необходимых\n     * для выигрыша.\n     * @param {string} text\n     */\n    setToWin(text) {\n        this.toWinEl.textContent = text;\n    }\n    /**\n     * Метод устанавливает текущий счет игрока.\n     * @param {string} text\n     */\n    setCurrent(text) {\n        this.currentEl.textContent = text;\n    }\n\n\n}","class Settings {\n    /**\n     * @param {Object} params - Парметры игры.\n     * @param {number} params.rowsCount - количество строк игрового поля.\n     * @param {number} params.colsCount - количество колонок игрового поля.\n     * @param {number} params.speed - скорость перемещения змейки.\n     * @param {number} params.winLength - какую длину надо наесть, чтобы выиграть.\n     * @throws {Error} если переданы не верные настройки выбрасывается\n     * соответствующая ошибка.\n     */\n    init(params) {\n        let defaultParams = {rowsCount: 21, colsCount: 21, speed: 2, winLength: 50};\n        Object.assign(defaultParams, params);\n\n        if (defaultParams.rowsCount < 10 || defaultParams.rowsCount > 30) {\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\n        }\n        this.rowsCount = defaultParams.rowsCount;\n\n        if (defaultParams.colsCount < 10 || defaultParams.colsCount > 30) {\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\n        }\n        this.colsCount = defaultParams.colsCount;\n\n        if (defaultParams.speed < 1 || defaultParams.speed > 10) {\n            throw new Error('Неверные настройки, значение speed должно быть в диапазоне [1, 10].');\n        }\n        this.speed = defaultParams.speed;\n\n        if (defaultParams.winLength < 5 || defaultParams.winLength > 50) {\n            throw new Error('Неверные настройки, значение winLength должно быть в диапазоне [5, 50].');\n        }\n        this.winLength = defaultParams.winLength;\n    }\n}","class Snake {\n    constructor() {\n        this.possibleDirections = [\"down\", \"up\", \"left\", \"right\"];\n\n        this.body = [\n            {\n                x: 1,\n                y: 1,\n            },\n        ];\n\n        this.direction = \"down\"\n    }\n\n    /**\n     * передаем настройки settings\n     */\n    init(settings){\n        this.settings = settings;\n    }\n\n    /**\n     * Метод осуществляет шаг змейки. Добавляет ячейку перед существующим\n     * положением головы и удаляет одну ячейку в хвосте.\n     */\n    performStep() {\n        let currentHeadCoords = this.body[0]; //берем текущее положение головы\n        let newHeadCoords = { //новые координаты головы\n            x: currentHeadCoords.x,\n            y: currentHeadCoords.y,\n        };\n        switch (this.direction) {\n            case \"down\":\n                newHeadCoords.y++;\n                break;\n            case \"up\":\n                newHeadCoords.y--;\n                break;\n            case \"left\":\n                newHeadCoords.x--;\n                break;\n            case \"right\":\n                newHeadCoords.x++;\n                break;\n        }\n\n\n        //если голова уходит за правый край\n        if (newHeadCoords.x > this.settings.colsCount) {\n            newHeadCoords.x = 1;\n        }\n        //если голова уходит за нижний край\n        if (newHeadCoords.y > this.settings.rowsCount) {\n            newHeadCoords.y = 1;\n        }\n        //если голова уходит за левый край\n        if (newHeadCoords.x == 0) {\n            newHeadCoords.x = this.settings.colsCount;\n        }\n        //если голова уходит за верхний край\n        if (newHeadCoords.y == 0) {\n            newHeadCoords.y = this.settings.rowsCount;\n        }\n\n        this.body.unshift(newHeadCoords); //добавляем голову\n        this.body.pop(); // удалем последнюю ячейку змеи\n    }\n\n    /**\n     * Меняем направление движения.\n     * @param {string} newDirection направление может быть down, up, left, right.\n     * @throws {Error} при передаче не корректного направления выбрасывается ошибка.\n     */\n    changeDirection(newDirection) {\n        if (!this.possibleDirections.includes(newDirection)) {\n            throw new Error('Передано не верное направление. Вы передали: ' + newDirection);\n        }\n        if (this.isPassedOppositeDirection(newDirection)) {\n            return;\n        }\n        this.direction = newDirection;\n    }\n\n    /**\n     * Метод проверяет, является ли переданное направление, противоположным\n     * тому куда сейчас движется змейка.\n     * @param {string} newDirection новое направление, может быть up, down, right, left.\n     * @returns {boolean} true если новое направление противоположно текущему,\n     * иначе false.\n     */\n    isPassedOppositeDirection(newDirection) {\n        if (this.direction == 'down' && newDirection == 'up') {\n            return true;\n        }\n        if (this.direction == 'up' && newDirection == 'down') {\n            return true;\n        }\n        if (this.direction == 'left' && newDirection == 'right') {\n            return true;\n        }\n        if (this.direction == 'right' && newDirection == 'left') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Метод дублирует в массиве объектов представляющих тело змейки\n     * последнюю ячейку, т.е. в массиве в конце оказываются два\n     * одинаковых объекта. Когда метод performStep в самом конце\n     * удаляет последний элемент массива, он удаляет сдублированный\n     * объект, таким образом тело змейки растет.\n     */\n    increaseBody() {\n        let bodyLastCell = this.body[this.body.length - 1];\n        let newBodyLastCell = {\n            x: bodyLastCell.x,\n            y: bodyLastCell.y,\n        };\n        this.body.push(newBodyLastCell);\n    }\n}","/** Здесь будет хранится статус игры, например играем мы, завершили или остановлено. */\nclass Status {\n    constructor() {\n        this.setPaused();\n    }\n\n    /** Это значит что мы играем. */\n    setPlaying() {\n        this.condition = 'playing';\n    }\n\n    /** Это значит что игра на паузе. */\n    setPaused() {\n        this.condition = 'paused';\n    }\n\n    /**\n     * @returns {boolean} если мы сейчас играем, тогда true, иначе false.\n     */\n    isPlaying() {\n        return this.condition === 'playing';\n    }\n\n    /**\n     * @returns {boolean} если сейчас игра на паузе, тогда true, иначе false.\n     */\n    isPaused() {\n        return this.condition === 'paused';\n    }\n}"]}